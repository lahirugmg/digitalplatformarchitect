{
  "questions": [
    {
      "id": "system_scale",
      "text": "What is the expected scale of your system?",
      "type": "single",
      "pillar": "microservices-domain-services",
      "options": [
        { 
          "value": "small", 
          "text": "Small (1-5 services, single team)",
          "patterns": { "modular-monolith": 3, "layered-architecture": 2, "microservice-architecture": -1 }
        },
        { 
          "value": "medium", 
          "text": "Medium (5-20 services, multiple teams)",
          "patterns": { "microservice-architecture": 2, "modular-monolith": 1, "event-driven-architecture": 1, "soa": 1 }
        },
        { 
          "value": "large", 
          "text": "Large (20+ services, multiple teams/departments)",
          "patterns": { "microservice-architecture": 3, "event-driven-architecture": 2, "soa": 2, "cell-based-architecture": 2 }
        },
        { 
          "value": "not_sure", 
          "text": "I'm not sure",
          "patterns": { "modular-monolith": 1, "layered-architecture": 1 }
        }
      ]
    },
    {
      "id": "team_structure",
      "text": "How is your development team structured?",
      "type": "single",
      "pillar": "microservices-domain-services",
      "options": [
        { 
          "value": "single_team", 
          "text": "Single small team (2-8 developers)",
          "patterns": { "modular-monolith": 3, "layered-architecture": 2, "microservice-architecture": -2 }
        },
        { 
          "value": "multiple_teams", 
          "text": "Multiple autonomous teams",
          "patterns": { "microservice-architecture": 3, "event-driven-architecture": 2, "cell-based-architecture": 1 }
        },
        { 
          "value": "mixed", 
          "text": "Mix of small and large teams",
          "patterns": { "microservice-architecture": 1, "modular-monolith": 1, "soa": 2 }
        },
        { 
          "value": "not_sure", 
          "text": "I'm not sure",
          "patterns": { "layered-architecture": 1 }
        }
      ]
    },
    {
      "id": "deployment_complexity",
      "text": "What is your preferred deployment strategy?",
      "type": "single", 
      "pillar": "microservices-domain-services",
      "options": [
        { 
          "value": "simple", 
          "text": "Simple deployments (single artifact)",
          "patterns": { "modular-monolith": 3, "layered-architecture": 2, "serverless": -1 }
        },
        { 
          "value": "independent", 
          "text": "Independent service deployments",
          "patterns": { "microservice-architecture": 3, "serverless": 2, "event-driven-architecture": 1 }
        },
        { 
          "value": "containerized", 
          "text": "Containerized with orchestration",
          "patterns": { "microservice-architecture": 2, "cell-based-architecture": 2, "event-driven-architecture": 1 }
        },
        { 
          "value": "not_sure", 
          "text": "I'm not sure",
          "patterns": { "layered-architecture": 1, "modular-monolith": 1 }
        }
      ]
    },
    {
      "id": "api_management_needs",
      "text": "What are your API management requirements?",
      "type": "multiple",
      "pillar": "api-management",
      "options": [
        { 
          "value": "rate_limiting", 
          "text": "Rate limiting and throttling",
          "patterns": { "microservice-architecture": 1, "soa": 2, "serverless": 1 }
        },
        { 
          "value": "security", 
          "text": "Authentication and authorization",
          "patterns": { "microservice-architecture": 1, "soa": 2, "oauth2": 3, "zero-trust": 2 }
        },
        { 
          "value": "analytics", 
          "text": "API analytics and monitoring",
          "patterns": { "microservice-architecture": 1, "soa": 1, "serverless": 1 }
        },
        { 
          "value": "versioning", 
          "text": "API versioning and lifecycle management",
          "patterns": { "microservice-architecture": 2, "soa": 2, "hexagonal-architecture": 1 }
        },
        { 
          "value": "developer_portal", 
          "text": "Developer portal and documentation",
          "patterns": { "soa": 2, "microservice-architecture": 1 }
        },
        { 
          "value": "none", 
          "text": "Minimal API management needs",
          "patterns": { "modular-monolith": 1, "layered-architecture": 1 }
        }
      ]
    },
    {
      "id": "integration_patterns",
      "text": "What integration patterns do you need?",
      "type": "multiple",
      "pillar": "enterprise-integration",
      "options": [
        { 
          "value": "sync_apis", 
          "text": "Synchronous API calls",
          "patterns": { "layered-architecture": 1, "microservice-architecture": 1, "soa": 2 }
        },
        { 
          "value": "async_messaging", 
          "text": "Asynchronous messaging",
          "patterns": { "event-driven-architecture": 3, "microservice-architecture": 2, "cqrs": 1 }
        },
        { 
          "value": "event_streaming", 
          "text": "Event streaming and processing", 
          "patterns": { "event-driven-architecture": 3, "cqrs": 2, "data-mesh": 1 }
        },
        { 
          "value": "batch_processing", 
          "text": "Batch data processing",
          "patterns": { "layered-architecture": 1, "data-mesh": 2, "serverless": 1 }
        },
        { 
          "value": "legacy_integration", 
          "text": "Legacy system integration",
          "patterns": { "soa": 3, "hexagonal-architecture": 2, "adapter-pattern": 2 }
        },
        { 
          "value": "minimal", 
          "text": "Minimal integration needs",
          "patterns": { "modular-monolith": 2, "layered-architecture": 1 }
        }
      ]
    },
    {
      "id": "data_consistency",
      "text": "What are your data consistency requirements?",
      "type": "single",
      "pillar": "data-platform",
      "options": [
        { 
          "value": "strong_consistency", 
          "text": "Strong consistency (ACID transactions)",
          "patterns": { "modular-monolith": 3, "layered-architecture": 2, "microservice-architecture": -1 }
        },
        { 
          "value": "eventual_consistency", 
          "text": "Eventual consistency is acceptable",
          "patterns": { "microservice-architecture": 2, "event-driven-architecture": 3, "cqrs": 2 }
        },
        { 
          "value": "mixed", 
          "text": "Mix of strong and eventual consistency",
          "patterns": { "cqrs": 3, "hexagonal-architecture": 2, "microservice-architecture": 1 }
        },
        { 
          "value": "not_sure", 
          "text": "I'm not sure",
          "patterns": { "layered-architecture": 1, "modular-monolith": 1 }
        }
      ]
    },
    {
      "id": "data_volume",
      "text": "What is your expected data volume and processing needs?",
      "type": "single",
      "pillar": "data-platform",
      "options": [
        { 
          "value": "low", 
          "text": "Low volume (< 1GB daily)",
          "patterns": { "modular-monolith": 2, "layered-architecture": 2, "serverless": 1 }
        },
        { 
          "value": "medium", 
          "text": "Medium volume (1GB - 1TB daily)",
          "patterns": { "microservice-architecture": 1, "event-driven-architecture": 2, "cqrs": 1 }
        },
        { 
          "value": "high", 
          "text": "High volume (> 1TB daily)",
          "patterns": { "event-driven-architecture": 3, "data-mesh": 3, "cqrs": 2 }
        },
        { 
          "value": "not_sure", 
          "text": "I'm not sure",
          "patterns": { "layered-architecture": 1 }
        }
      ]
    },
    {
      "id": "security_requirements",
      "text": "What are your security and compliance requirements?",
      "type": "multiple",
      "pillar": "iam",
      "options": [
        { 
          "value": "basic_auth", 
          "text": "Basic authentication and authorization",
          "patterns": { "layered-architecture": 1, "modular-monolith": 1 }
        },
        { 
          "value": "oauth2", 
          "text": "OAuth2/OpenID Connect",
          "patterns": { "oauth2": 3, "microservice-architecture": 2, "soa": 2 }
        },
        { 
          "value": "zero_trust", 
          "text": "Zero-trust security model",
          "patterns": { "zero-trust": 3, "microservice-architecture": 2, "cell-based-architecture": 2 }
        },
        { 
          "value": "compliance", 
          "text": "Regulatory compliance (GDPR, HIPAA, etc.)",
          "patterns": { "hexagonal-architecture": 2, "microservice-architecture": 1, "soa": 1 }
        },
        { 
          "value": "audit", 
          "text": "Comprehensive audit logging",
          "patterns": { "event-driven-architecture": 2, "cqrs": 1, "soa": 1 }
        },
        { 
          "value": "minimal", 
          "text": "Minimal security requirements",
          "patterns": { "modular-monolith": 1, "layered-architecture": 1 }
        }
      ]
    },
    {
      "id": "messaging_needs",
      "text": "What are your messaging and communication needs?",
      "type": "multiple",
      "pillar": "message-broker",
      "options": [
        { 
          "value": "request_response", 
          "text": "Request-response patterns",
          "patterns": { "layered-architecture": 1, "microservice-architecture": 1, "soa": 2 }
        },
        { 
          "value": "pub_sub", 
          "text": "Publish-subscribe messaging",
          "patterns": { "event-driven-architecture": 3, "microservice-architecture": 2, "cqrs": 1 }
        },
        { 
          "value": "event_sourcing", 
          "text": "Event sourcing and replay",
          "patterns": { "event-sourcing": 3, "cqrs": 3, "event-driven-architecture": 2 }
        },
        { 
          "value": "streaming", 
          "text": "Real-time event streaming",
          "patterns": { "event-driven-architecture": 3, "data-mesh": 2, "cqrs": 1 }
        },
        { 
          "value": "queuing", 
          "text": "Work queuing and task processing",
          "patterns": { "microservice-architecture": 2, "serverless": 2, "event-driven-architecture": 1 }
        },
        { 
          "value": "minimal", 
          "text": "Minimal messaging needs",
          "patterns": { "modular-monolith": 2, "layered-architecture": 1 }
        }
      ]
    },
    {
      "id": "performance_requirements",
      "text": "What are your performance and scalability requirements?",
      "type": "single",
      "pillar": "microservices-domain-services",
      "options": [
        { 
          "value": "low_latency", 
          "text": "Low latency (< 100ms responses)",
          "patterns": { "microservice-architecture": 1, "serverless": -1, "modular-monolith": 2 }
        },
        { 
          "value": "high_throughput", 
          "text": "High throughput (thousands of requests/sec)",
          "patterns": { "microservice-architecture": 2, "event-driven-architecture": 3, "serverless": 1 }
        },
        { 
          "value": "elastic_scaling", 
          "text": "Elastic auto-scaling",
          "patterns": { "serverless": 3, "microservice-architecture": 2, "cell-based-architecture": 2 }
        },
        { 
          "value": "steady_load", 
          "text": "Steady, predictable load",
          "patterns": { "modular-monolith": 2, "layered-architecture": 2, "soa": 1 }
        },
        { 
          "value": "not_sure", 
          "text": "I'm not sure",
          "patterns": { "layered-architecture": 1, "modular-monolith": 1 }
        }
      ]
    }
  ],
  "patterns": {
    "microservice-architecture": {
      "name": "Microservice Architecture",
      "description": "Independently deployable services organized around business capabilities",
      "slug": "microservice-architecture"
    },
    "modular-monolith": {
      "name": "Modular Monolith",
      "description": "Single deployable unit with well-defined internal module boundaries",
      "slug": "monolithic"
    },
    "event-driven-architecture": {
      "name": "Event-Driven Architecture",
      "description": "Loosely coupled architecture using events for communication",
      "slug": "event-driven-architecture"
    },
    "layered-architecture": {
      "name": "Layered Architecture",
      "description": "Traditional multi-tier architecture with clear separation of concerns",
      "slug": "layered-architecture"
    },
    "hexagonal-architecture": {
      "name": "Hexagonal Architecture",
      "description": "Ports and adapters pattern isolating business logic from external concerns",
      "slug": "hexagonal-architecture"
    },
    "soa": {
      "name": "Service-Oriented Architecture",
      "description": "Services as reusable business functions with standardized interfaces",
      "slug": "service-oriented-architecture"
    },
    "cqrs": {
      "name": "CQRS",
      "description": "Command Query Responsibility Segregation for read/write optimization",
      "slug": "cqrs"
    },
    "serverless": {
      "name": "Serverless Architecture",
      "description": "Function-as-a-Service with automatic scaling and resource management",
      "slug": "serverless"
    },
    "cell-based-architecture": {
      "name": "Cell-Based Architecture",
      "description": "Self-contained units with their own gateway and control plane",
      "slug": "cell-based-architecture"
    },
    "data-mesh": {
      "name": "Data Mesh",
      "description": "Decentralized data architecture with domain-owned data products",
      "slug": "data-mesh"
    },
    "oauth2": {
      "name": "OAuth2 Architecture",
      "description": "Secure authorization framework for API access",
      "slug": "oauth2-patterns"
    },
    "zero-trust": {
      "name": "Zero Trust Architecture", 
      "description": "Security model with no implicit trust and continuous verification",
      "slug": "zero-trust-security"
    },
    "event-sourcing": {
      "name": "Event Sourcing",
      "description": "Storing state as a sequence of events for complete audit trail",
      "slug": "event-sourcing"
    },
    "adapter-pattern": {
      "name": "Adapter Pattern",
      "description": "Integration pattern for connecting incompatible interfaces",
      "slug": "adapter-pattern"
    }
  },
  "pillarMappings": {
    "api-management": {
      "buildingBlocks": ["api-management"],
      "blueprints": ["small-ha", "microservices-platform"]
    },
    "enterprise-integration": {
      "buildingBlocks": ["enterprise-integration", "messaging-streaming-platform"],
      "blueprints": ["small-ha", "microservices-platform"]
    },
    "iam": {
      "buildingBlocks": ["identity-access-management", "security-services"],
      "blueprints": ["small-ha"]
    },
    "message-broker": {
      "buildingBlocks": ["messaging-streaming-platform"],
      "blueprints": ["microservices-platform"]
    },
    "microservices-domain-services": {
      "buildingBlocks": [
        "internal-developer-platform",
        "devops-ci-cd",
        "cloud-infrastructure-orchestration",
        "observability-operations"
      ],
      "blueprints": ["microservices-platform"]
    },
    "data-platform": {
      "buildingBlocks": ["data-platform"],
      "blueprints": ["microservices-platform"]
    }
  }
}
